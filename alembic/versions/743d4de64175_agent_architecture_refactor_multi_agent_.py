"""Agent architecture refactor - multi-agent system with embedded configuration and history tracking

Revision ID: 743d4de64175
Revises: cbe1d08d4020
Create Date: 2025-09-05 14:02:14.029638

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '743d4de64175'
down_revision = 'cbe1d08d4020'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('agents',
    sa.Column('organization_id', sa.UUID(), nullable=False, comment='Organization this agent belongs to'),
    sa.Column('agent_type', sa.String(length=50), nullable=False, comment='Type of agent (customer_support, categorization, etc.)'),
    sa.Column('name', sa.String(length=255), nullable=False, comment='Human-readable name for the agent'),
    sa.Column('avatar_url', sa.String(length=500), nullable=True, comment='URL for agent avatar image'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether agent is active and ready to handle requests'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='Current agent status (active, inactive, error, maintenance)'),
    sa.Column('role', sa.String(length=255), nullable=True, comment='Agent role and responsibility description'),
    sa.Column('prompt', sa.Text(), nullable=True, comment='System prompt for Pydantic AI agent initialization'),
    sa.Column('initial_context', sa.Text(), nullable=True, comment='Initial context provided to agent conversations'),
    sa.Column('initial_ai_msg', sa.Text(), nullable=True, comment='Initial AI message for conversation start'),
    sa.Column('tone', sa.String(length=100), nullable=True, comment='Communication tone (formal, casual, professional, etc.)'),
    sa.Column('communication_style', sa.String(length=100), nullable=False, comment='Communication style preference'),
    sa.Column('use_streaming', sa.Boolean(), nullable=False, comment='Whether to use streaming responses'),
    sa.Column('response_length', sa.String(length=20), nullable=False, comment='Preferred response length (brief, moderate, detailed)'),
    sa.Column('memory_retention', sa.Integer(), nullable=False, comment='Number of previous messages to retain in memory'),
    sa.Column('show_suggestions_after_each_message', sa.Boolean(), nullable=False, comment='Whether to show suggested responses'),
    sa.Column('suggestions_prompt', sa.Text(), nullable=True, comment='Custom prompt for generating suggestions'),
    sa.Column('max_context_size', sa.Integer(), nullable=False, comment='Maximum context window size in tokens'),
    sa.Column('use_memory_context', sa.Boolean(), nullable=False, comment='Whether to use conversation memory in context'),
    sa.Column('max_iterations', sa.Integer(), nullable=False, comment='Maximum number of tool call iterations'),
    sa.Column('timeout_seconds', sa.Integer(), nullable=True, comment='Timeout for agent responses in seconds'),
    sa.Column('tools', sa.JSON(), nullable=False, comment='List of enabled tool names'),
    sa.Column('last_used_at', sa.DateTime(timezone=True), nullable=True, comment='When agent was last used to process a message'),
    sa.Column('extra_metadata', sa.JSON(), nullable=True, comment='Additional metadata and custom fields'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True, comment='Internal notes'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    comment='Multi-agent system for organization-scoped automation and support'
    )
    op.create_index(op.f('ix_agents_agent_type'), 'agents', ['agent_type'], unique=False)
    op.create_index(op.f('ix_agents_created_at'), 'agents', ['created_at'], unique=False)
    op.create_index(op.f('ix_agents_deleted_at'), 'agents', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_agents_is_active'), 'agents', ['is_active'], unique=False)
    op.create_index(op.f('ix_agents_is_deleted'), 'agents', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_agents_organization_id'), 'agents', ['organization_id'], unique=False)
    op.create_index(op.f('ix_agents_status'), 'agents', ['status'], unique=False)
    op.create_index(op.f('ix_agents_updated_at'), 'agents', ['updated_at'], unique=False)
    op.create_table('agent_actions',
    sa.Column('agent_id', sa.UUID(), nullable=False, comment='Agent that performed the action'),
    sa.Column('action_type', sa.String(length=50), nullable=False, comment='Type of action (chat_response, ticket_creation, tool_call, etc.)'),
    sa.Column('action_subtype', sa.String(length=50), nullable=True, comment='Subtype for more specific action categorization'),
    sa.Column('action_data', sa.JSON(), nullable=False, comment='Input data and parameters for the action'),
    sa.Column('action_context', sa.JSON(), nullable=True, comment='Context information (conversation ID, user info, etc.)'),
    sa.Column('result_data', sa.JSON(), nullable=True, comment='Action results and outputs'),
    sa.Column('success', sa.Boolean(), nullable=False, comment='Whether the action completed successfully'),
    sa.Column('error_message', sa.Text(), nullable=True, comment='Error message if action failed'),
    sa.Column('execution_time_ms', sa.Integer(), nullable=False, comment='Execution time in milliseconds'),
    sa.Column('tokens_used', sa.Integer(), nullable=True, comment='Number of AI model tokens consumed'),
    sa.Column('cost_cents', sa.DECIMAL(precision=10, scale=4), nullable=True, comment='Estimated cost in cents for the action'),
    sa.Column('confidence_score', sa.DECIMAL(precision=5, scale=4), nullable=True, comment='Agent confidence in the action result (0.0 to 1.0)'),
    sa.Column('quality_score', sa.DECIMAL(precision=5, scale=4), nullable=True, comment='Quality assessment score (0.0 to 1.0)'),
    sa.Column('user_feedback_score', sa.Integer(), nullable=True, comment='User feedback score (1-5 stars) if available'),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=False, comment='When the action started'),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=False, comment='When the action completed'),
    sa.Column('user_id', sa.UUID(), nullable=True, comment='User who triggered the action (if applicable)'),
    sa.Column('session_id', sa.String(length=255), nullable=True, comment='Session ID for grouping related actions'),
    sa.Column('conversation_id', sa.String(length=255), nullable=True, comment='Conversation ID for chat-related actions'),
    sa.Column('source_channel', sa.String(length=50), nullable=True, comment='Channel that triggered the action (api, slack, email, etc.)'),
    sa.Column('source_reference', sa.String(length=255), nullable=True, comment='External reference ID'),
    sa.Column('ip_address', sa.String(length=45), nullable=True, comment='IP address of the request (if applicable)'),
    sa.Column('user_agent', sa.Text(), nullable=True, comment='User agent string (if from web request)'),
    sa.Column('tools_used', sa.JSON(), nullable=True, comment='List of tools/integrations used in the action'),
    sa.Column('integration_calls', sa.JSON(), nullable=True, comment='External API calls made during action'),
    sa.Column('input_length', sa.Integer(), nullable=True, comment='Length of input content in characters'),
    sa.Column('output_length', sa.Integer(), nullable=True, comment='Length of output content in characters'),
    sa.Column('media_processed', sa.JSON(), nullable=True, comment='Information about processed media files'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True, comment='Internal notes'),
    sa.Column('extra_metadata', sa.Text(), nullable=True, comment='JSON metadata storage'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.CheckConstraint('confidence_score IS NULL OR (confidence_score >= 0.0 AND confidence_score <= 1.0)', name='ck_agent_action_confidence_score'),
    sa.CheckConstraint('quality_score IS NULL OR (quality_score >= 0.0 AND quality_score <= 1.0)', name='ck_agent_action_quality_score'),
    sa.CheckConstraint('user_feedback_score IS NULL OR (user_feedback_score >= 1 AND user_feedback_score <= 5)', name='ck_agent_action_user_feedback'),
    sa.ForeignKeyConstraint(['agent_id'], ['agents.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    comment='Agent action tracking with performance metrics and analytics'
    )
    op.create_index(op.f('ix_agent_actions_action_type'), 'agent_actions', ['action_type'], unique=False)
    op.create_index(op.f('ix_agent_actions_agent_id'), 'agent_actions', ['agent_id'], unique=False)
    op.create_index(op.f('ix_agent_actions_conversation_id'), 'agent_actions', ['conversation_id'], unique=False)
    op.create_index(op.f('ix_agent_actions_created_at'), 'agent_actions', ['created_at'], unique=False)
    op.create_index(op.f('ix_agent_actions_deleted_at'), 'agent_actions', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_agent_actions_is_deleted'), 'agent_actions', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_agent_actions_session_id'), 'agent_actions', ['session_id'], unique=False)
    op.create_index(op.f('ix_agent_actions_started_at'), 'agent_actions', ['started_at'], unique=False)
    op.create_index(op.f('ix_agent_actions_success'), 'agent_actions', ['success'], unique=False)
    op.create_index(op.f('ix_agent_actions_updated_at'), 'agent_actions', ['updated_at'], unique=False)
    op.create_table('agent_history',
    sa.Column('agent_id', sa.UUID(), nullable=False, comment='Agent this history entry belongs to'),
    sa.Column('changed_by_user_id', sa.UUID(), nullable=False, comment='User who made the change'),
    sa.Column('change_type', sa.String(length=50), nullable=False, comment='Type of change (configuration_update, status_change, activation, etc.)'),
    sa.Column('field_changed', sa.String(length=100), nullable=False, comment='Field that was changed (prompt, role, is_active, etc.)'),
    sa.Column('old_value', sa.Text(), nullable=True, comment='Previous value (JSON for complex fields)'),
    sa.Column('new_value', sa.Text(), nullable=True, comment='New value (JSON for complex fields)'),
    sa.Column('change_timestamp', sa.DateTime(timezone=True), nullable=False, comment='When the change occurred'),
    sa.Column('change_reason', sa.Text(), nullable=True, comment='Optional reason for the change'),
    sa.Column('ip_address', sa.String(length=45), nullable=True, comment='IP address of the request that made the change'),
    sa.Column('request_metadata', sa.Text(), nullable=True, comment='Additional request metadata (user agent, etc.)'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True, comment='Internal notes'),
    sa.Column('extra_metadata', sa.Text(), nullable=True, comment='JSON metadata storage'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['agent_id'], ['agents.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['changed_by_user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index(op.f('ix_agent_history_agent_id'), 'agent_history', ['agent_id'], unique=False)
    op.create_index(op.f('ix_agent_history_change_timestamp'), 'agent_history', ['change_timestamp'], unique=False)
    op.create_index(op.f('ix_agent_history_change_type'), 'agent_history', ['change_type'], unique=False)
    op.create_index(op.f('ix_agent_history_changed_by_user_id'), 'agent_history', ['changed_by_user_id'], unique=False)
    op.create_index(op.f('ix_agent_history_created_at'), 'agent_history', ['created_at'], unique=False)
    op.create_index(op.f('ix_agent_history_deleted_at'), 'agent_history', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_agent_history_field_changed'), 'agent_history', ['field_changed'], unique=False)
    op.create_index(op.f('ix_agent_history_is_deleted'), 'agent_history', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_agent_history_updated_at'), 'agent_history', ['updated_at'], unique=False)
    op.create_table('agent_tasks',
    sa.Column('agent_id', sa.UUID(), nullable=False, comment='Agent assigned to process this task'),
    sa.Column('task_type', sa.String(length=50), nullable=False, comment='Type of task (slack_message, email, api_request, health_check, etc.)'),
    sa.Column('task_subtype', sa.String(length=50), nullable=True, comment='Subtype for more granular task categorization'),
    sa.Column('task_data', sa.JSON(), nullable=False, comment='Task input data and parameters'),
    sa.Column('task_metadata', sa.JSON(), nullable=True, comment='Additional metadata about the task source and context'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='Task status (pending, assigned, processing, completed, failed, cancelled)'),
    sa.Column('priority', sa.Integer(), nullable=False, comment='Task priority (1=highest, 10=lowest)'),
    sa.Column('scheduled_at', sa.DateTime(timezone=True), nullable=False, comment='When the task should be processed'),
    sa.Column('assigned_at', sa.DateTime(timezone=True), nullable=True, comment='When task was assigned to an agent'),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True, comment='When task processing started'),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True, comment='When task was completed'),
    sa.Column('celery_task_id', sa.String(length=255), nullable=True, comment='Celery task ID for tracking background processing'),
    sa.Column('retry_count', sa.Integer(), nullable=False, comment='Number of retry attempts made'),
    sa.Column('max_retries', sa.Integer(), nullable=False, comment='Maximum number of retry attempts allowed'),
    sa.Column('last_error', sa.Text(), nullable=True, comment='Last error message if task failed'),
    sa.Column('error_history', sa.JSON(), nullable=True, comment='History of all error attempts'),
    sa.Column('result_data', sa.JSON(), nullable=True, comment='Task processing results and output'),
    sa.Column('result_metadata', sa.JSON(), nullable=True, comment='Metadata about task processing (duration, resources used, etc.)'),
    sa.Column('parent_task_id', sa.UUID(), nullable=True, comment='Parent task if this is a subtask'),
    sa.Column('correlation_id', sa.String(length=255), nullable=True, comment='Correlation ID for grouping related tasks'),
    sa.Column('estimated_duration_seconds', sa.Integer(), nullable=True, comment='Estimated processing duration in seconds'),
    sa.Column('actual_duration_seconds', sa.Integer(), nullable=True, comment='Actual processing duration in seconds'),
    sa.Column('created_by_user_id', sa.UUID(), nullable=True, comment='User who created the task (if applicable)'),
    sa.Column('source_channel', sa.String(length=50), nullable=True, comment='Channel that generated the task (slack, email, api, etc.)'),
    sa.Column('source_reference', sa.String(length=255), nullable=True, comment='External reference ID (slack message ID, email ID, etc.)'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True, comment='Internal notes'),
    sa.Column('extra_metadata', sa.Text(), nullable=True, comment='JSON metadata storage'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.CheckConstraint("status IN ('pending', 'assigned', 'processing', 'completed', 'failed', 'cancelled')", name='ck_agent_task_status'),
    sa.CheckConstraint('priority >= 1 AND priority <= 10', name='ck_agent_task_priority'),
    sa.ForeignKeyConstraint(['agent_id'], ['agents.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['parent_task_id'], ['agent_tasks.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    comment='Agent task queue with autonomous processing and retry logic'
    )
    op.create_index(op.f('ix_agent_tasks_agent_id'), 'agent_tasks', ['agent_id'], unique=False)
    op.create_index(op.f('ix_agent_tasks_celery_task_id'), 'agent_tasks', ['celery_task_id'], unique=False)
    op.create_index(op.f('ix_agent_tasks_correlation_id'), 'agent_tasks', ['correlation_id'], unique=False)
    op.create_index(op.f('ix_agent_tasks_created_at'), 'agent_tasks', ['created_at'], unique=False)
    op.create_index(op.f('ix_agent_tasks_deleted_at'), 'agent_tasks', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_agent_tasks_is_deleted'), 'agent_tasks', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_agent_tasks_priority'), 'agent_tasks', ['priority'], unique=False)
    op.create_index(op.f('ix_agent_tasks_scheduled_at'), 'agent_tasks', ['scheduled_at'], unique=False)
    op.create_index(op.f('ix_agent_tasks_status'), 'agent_tasks', ['status'], unique=False)
    op.create_index(op.f('ix_agent_tasks_task_type'), 'agent_tasks', ['task_type'], unique=False)
    op.create_index(op.f('ix_agent_tasks_updated_at'), 'agent_tasks', ['updated_at'], unique=False)
    op.create_table('agent_files',
    sa.Column('agent_id', sa.UUID(), nullable=False, comment='Agent this file belongs to'),
    sa.Column('file_id', sa.UUID(), nullable=False, comment='File attached to agent'),
    sa.Column('processing_status', sa.String(length=20), nullable=False, comment='Processing status (pending, processing, completed, failed)'),
    sa.Column('extracted_content', sa.Text(), nullable=True, comment='Text content extracted from file for agent context'),
    sa.Column('content_hash', sa.String(length=64), nullable=True, comment='SHA-256 hash of extracted content for deduplication'),
    sa.Column('content_length', sa.Integer(), nullable=True, comment='Length of extracted content in characters'),
    sa.Column('order_index', sa.Integer(), nullable=False, comment='Order of file in agent context (0 = first)'),
    sa.Column('priority', sa.String(length=10), nullable=False, comment='File priority for context inclusion (high, normal, low)'),
    sa.Column('processing_started_at', sa.DateTime(timezone=True), nullable=True, comment='When processing started'),
    sa.Column('processing_completed_at', sa.DateTime(timezone=True), nullable=True, comment='When processing completed'),
    sa.Column('processing_error', sa.Text(), nullable=True, comment='Error message if processing failed'),
    sa.Column('attached_at', sa.DateTime(timezone=True), nullable=False, comment='When file was attached to agent'),
    sa.Column('attached_by_user_id', sa.UUID(), nullable=True, comment='User who attached the file'),
    sa.Column('last_used_in_context', sa.DateTime(timezone=True), nullable=True, comment='When this file was last used in agent context'),
    sa.Column('usage_count', sa.Integer(), nullable=False, comment='Number of times file content was used in context'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True, comment='Internal notes'),
    sa.Column('extra_metadata', sa.Text(), nullable=True, comment='JSON metadata storage'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.CheckConstraint("priority IN ('high', 'normal', 'low')", name='ck_agent_file_priority'),
    sa.CheckConstraint("processing_status IN ('pending', 'processing', 'completed', 'failed')", name='ck_agent_file_processing_status'),
    sa.ForeignKeyConstraint(['agent_id'], ['agents.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['attached_by_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['file_id'], ['files.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    comment='Agent file relationships with processing status and context metadata'
    )
    op.create_index(op.f('ix_agent_files_agent_id'), 'agent_files', ['agent_id'], unique=False)
    op.create_index(op.f('ix_agent_files_content_hash'), 'agent_files', ['content_hash'], unique=False)
    op.create_index(op.f('ix_agent_files_created_at'), 'agent_files', ['created_at'], unique=False)
    op.create_index(op.f('ix_agent_files_deleted_at'), 'agent_files', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_agent_files_file_id'), 'agent_files', ['file_id'], unique=False)
    op.create_index(op.f('ix_agent_files_is_deleted'), 'agent_files', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_agent_files_processing_status'), 'agent_files', ['processing_status'], unique=False)
    op.create_index(op.f('ix_agent_files_updated_at'), 'agent_files', ['updated_at'], unique=False)
    # First, update foreign key constraints BEFORE dropping the old table
    op.drop_constraint(op.f('agent_usage_stats_agent_id_fkey'), 'agent_usage_stats', type_='foreignkey')
    op.create_foreign_key(None, 'agent_usage_stats', 'agents', ['agent_id'], ['id'], ondelete='CASCADE')
    
    # Now we can safely drop the old table and its indexes
    op.drop_index(op.f('ix_ai_agents_agent_type'), table_name='ai_agents')
    op.drop_index(op.f('ix_ai_agents_created_at'), table_name='ai_agents')
    op.drop_index(op.f('ix_ai_agents_deleted_at'), table_name='ai_agents')
    op.drop_index(op.f('ix_ai_agents_is_active'), table_name='ai_agents')
    op.drop_index(op.f('ix_ai_agents_is_deleted'), table_name='ai_agents')
    op.drop_index(op.f('ix_ai_agents_organization_id'), table_name='ai_agents')
    op.drop_index(op.f('ix_ai_agents_status'), table_name='ai_agents')
    op.drop_index(op.f('ix_ai_agents_updated_at'), table_name='ai_agents')
    op.drop_table('ai_agents')
    
    # Add unique constraints
    op.create_unique_constraint(None, 'agent_usage_stats', ['id'])
    op.create_unique_constraint(None, 'ai_agent_configs', ['id'])
    op.create_unique_constraint(None, 'files', ['id'])
    op.create_unique_constraint(None, 'integrations', ['id'])
    op.create_unique_constraint(None, 'organizations', ['id'])
    op.create_unique_constraint(None, 'tickets', ['id'])
    op.create_unique_constraint(None, 'users', ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'users', type_='unique')
    op.drop_constraint(None, 'tickets', type_='unique')
    op.drop_constraint(None, 'organizations', type_='unique')
    op.drop_constraint(None, 'integrations', type_='unique')
    op.drop_constraint(None, 'files', type_='unique')
    op.drop_constraint(None, 'ai_agent_configs', type_='unique')
    op.drop_constraint(None, 'agent_usage_stats', type_='foreignkey')
    op.create_foreign_key(op.f('agent_usage_stats_agent_id_fkey'), 'agent_usage_stats', 'ai_agents', ['agent_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint(None, 'agent_usage_stats', type_='unique')
    op.create_table('ai_agents',
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=False, comment='Organization this agent belongs to'),
    sa.Column('agent_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False, comment='Type of agent (customer_support, categorization, etc.)'),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='Human-readable name for the agent'),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='Whether agent is active and ready to handle requests'),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False, comment='Current agent status (active, inactive, error, maintenance)'),
    sa.Column('configuration', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False, comment='Complete agent configuration including prompts, model settings, and tool configuration'),
    sa.Column('last_used_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='When agent was last used to process a message'),
    sa.Column('auto_created', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='Whether this agent was auto-created during organization setup'),
    sa.Column('extra_metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='Additional metadata and custom fields'),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True, comment='Internal notes'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name=op.f('ai_agents_organization_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('ai_agents_pkey')),
    sa.UniqueConstraint('organization_id', 'agent_type', name=op.f('uq_org_agent_type'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    comment='AI agents for organization-scoped customer support and automation'
    )
    op.create_index(op.f('ix_ai_agents_updated_at'), 'ai_agents', ['updated_at'], unique=False)
    op.create_index(op.f('ix_ai_agents_status'), 'ai_agents', ['status'], unique=False)
    op.create_index(op.f('ix_ai_agents_organization_id'), 'ai_agents', ['organization_id'], unique=False)
    op.create_index(op.f('ix_ai_agents_is_deleted'), 'ai_agents', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_ai_agents_is_active'), 'ai_agents', ['is_active'], unique=False)
    op.create_index(op.f('ix_ai_agents_deleted_at'), 'ai_agents', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_ai_agents_created_at'), 'ai_agents', ['created_at'], unique=False)
    op.create_index(op.f('ix_ai_agents_agent_type'), 'ai_agents', ['agent_type'], unique=False)
    op.drop_index(op.f('ix_agent_files_updated_at'), table_name='agent_files')
    op.drop_index(op.f('ix_agent_files_processing_status'), table_name='agent_files')
    op.drop_index(op.f('ix_agent_files_is_deleted'), table_name='agent_files')
    op.drop_index(op.f('ix_agent_files_file_id'), table_name='agent_files')
    op.drop_index(op.f('ix_agent_files_deleted_at'), table_name='agent_files')
    op.drop_index(op.f('ix_agent_files_created_at'), table_name='agent_files')
    op.drop_index(op.f('ix_agent_files_content_hash'), table_name='agent_files')
    op.drop_index(op.f('ix_agent_files_agent_id'), table_name='agent_files')
    op.drop_table('agent_files')
    op.drop_index(op.f('ix_agent_tasks_updated_at'), table_name='agent_tasks')
    op.drop_index(op.f('ix_agent_tasks_task_type'), table_name='agent_tasks')
    op.drop_index(op.f('ix_agent_tasks_status'), table_name='agent_tasks')
    op.drop_index(op.f('ix_agent_tasks_scheduled_at'), table_name='agent_tasks')
    op.drop_index(op.f('ix_agent_tasks_priority'), table_name='agent_tasks')
    op.drop_index(op.f('ix_agent_tasks_is_deleted'), table_name='agent_tasks')
    op.drop_index(op.f('ix_agent_tasks_deleted_at'), table_name='agent_tasks')
    op.drop_index(op.f('ix_agent_tasks_created_at'), table_name='agent_tasks')
    op.drop_index(op.f('ix_agent_tasks_correlation_id'), table_name='agent_tasks')
    op.drop_index(op.f('ix_agent_tasks_celery_task_id'), table_name='agent_tasks')
    op.drop_index(op.f('ix_agent_tasks_agent_id'), table_name='agent_tasks')
    op.drop_table('agent_tasks')
    op.drop_index(op.f('ix_agent_history_updated_at'), table_name='agent_history')
    op.drop_index(op.f('ix_agent_history_is_deleted'), table_name='agent_history')
    op.drop_index(op.f('ix_agent_history_field_changed'), table_name='agent_history')
    op.drop_index(op.f('ix_agent_history_deleted_at'), table_name='agent_history')
    op.drop_index(op.f('ix_agent_history_created_at'), table_name='agent_history')
    op.drop_index(op.f('ix_agent_history_changed_by_user_id'), table_name='agent_history')
    op.drop_index(op.f('ix_agent_history_change_type'), table_name='agent_history')
    op.drop_index(op.f('ix_agent_history_change_timestamp'), table_name='agent_history')
    op.drop_index(op.f('ix_agent_history_agent_id'), table_name='agent_history')
    op.drop_table('agent_history')
    op.drop_index(op.f('ix_agent_actions_updated_at'), table_name='agent_actions')
    op.drop_index(op.f('ix_agent_actions_success'), table_name='agent_actions')
    op.drop_index(op.f('ix_agent_actions_started_at'), table_name='agent_actions')
    op.drop_index(op.f('ix_agent_actions_session_id'), table_name='agent_actions')
    op.drop_index(op.f('ix_agent_actions_is_deleted'), table_name='agent_actions')
    op.drop_index(op.f('ix_agent_actions_deleted_at'), table_name='agent_actions')
    op.drop_index(op.f('ix_agent_actions_created_at'), table_name='agent_actions')
    op.drop_index(op.f('ix_agent_actions_conversation_id'), table_name='agent_actions')
    op.drop_index(op.f('ix_agent_actions_agent_id'), table_name='agent_actions')
    op.drop_index(op.f('ix_agent_actions_action_type'), table_name='agent_actions')
    op.drop_table('agent_actions')
    op.drop_index(op.f('ix_agents_updated_at'), table_name='agents')
    op.drop_index(op.f('ix_agents_status'), table_name='agents')
    op.drop_index(op.f('ix_agents_organization_id'), table_name='agents')
    op.drop_index(op.f('ix_agents_is_deleted'), table_name='agents')
    op.drop_index(op.f('ix_agents_is_active'), table_name='agents')
    op.drop_index(op.f('ix_agents_deleted_at'), table_name='agents')
    op.drop_index(op.f('ix_agents_created_at'), table_name='agents')
    op.drop_index(op.f('ix_agents_agent_type'), table_name='agents')
    op.drop_table('agents')
    # ### end Alembic commands ###