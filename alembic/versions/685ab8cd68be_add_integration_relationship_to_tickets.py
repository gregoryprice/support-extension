"""Add integration relationship to tickets

Revision ID: 685ab8cd68be
Revises: c740f9fb4b4b
Create Date: 2025-09-06 12:20:17.279518

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '685ab8cd68be'
down_revision = 'c740f9fb4b4b'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Step 1: Add the is_system_agent column, allowing nulls initially.
    op.add_column('agents', sa.Column('is_system_agent', sa.Boolean(), nullable=True, server_default=sa.text('false')))

    # Step 2: Set the value for is_system_agent based on organization_id.
    # Assume existing agents with no organization are system agents.
    op.execute("UPDATE agents SET is_system_agent = true WHERE organization_id IS NULL")
    op.execute("UPDATE agents SET is_system_agent = false WHERE organization_id IS NOT NULL")

    # Step 3: Get the first organization to assign to any orphaned non-system agents.
    conn = op.get_bind()
    result = conn.execute(sa.text("SELECT id FROM organizations LIMIT 1")).fetchone()
    if result:
        default_org_id = str(result[0])
        # This condition should now correctly find agents that are not system agents but lack an org ID.
        op.execute(
            f"UPDATE agents SET organization_id = '{default_org_id}' WHERE organization_id IS NULL AND is_system_agent = false"
        )

    # Step 4: Now that the data is clean, alter the column to be non-nullable.
    op.alter_column('agents', 'is_system_agent', existing_type=sa.Boolean(), nullable=False)


    op.drop_index(op.f('idx_chat_conversation_deleted'), table_name='chat_conversations_archived')
    op.drop_index(op.f('idx_chat_conversation_title_search'), table_name='chat_conversations_archived')
    op.drop_index(op.f('idx_chat_conversation_updated'), table_name='chat_conversations_archived')
    op.drop_index(op.f('idx_chat_conversation_user'), table_name='chat_conversations_archived')
    op.drop_index(op.f('idx_chat_conversation_user_deleted'), table_name='chat_conversations_archived')
    op.drop_index(op.f('idx_chat_conversation_user_title'), table_name='chat_conversations_archived')
    op.drop_table('chat_conversations_archived')
    op.create_unique_constraint(None, 'agent_actions', ['id'])
    op.create_unique_constraint(None, 'agent_files', ['id'])
    op.create_unique_constraint(None, 'agent_history', ['id'])
    op.create_unique_constraint(None, 'agent_tasks', ['id'])
    
    # Add a check constraint instead of making the column NOT NULL
    op.create_check_constraint(
        "ck_agent_organization_id",
        "agents",
        "(is_system_agent = true AND organization_id IS NULL) OR (is_system_agent = false AND organization_id IS NOT NULL)"
    )

    op.create_unique_constraint(None, 'agents', ['id'])
    op.alter_column('messages', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               existing_nullable=True)
    op.alter_column('messages', 'notes',
               existing_type=sa.TEXT(),
               comment='Internal notes',
               existing_nullable=True)
    op.alter_column('messages', 'extra_metadata',
               existing_type=sa.TEXT(),
               comment='JSON metadata storage',
               existing_nullable=True)
    op.alter_column('messages', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               nullable=False)
    op.alter_column('messages', 'is_deleted',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               nullable=False)
    op.create_index(op.f('ix_messages_deleted_at'), 'messages', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_messages_is_deleted'), 'messages', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_messages_updated_at'), 'messages', ['updated_at'], unique=False)
    op.alter_column('threads', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               existing_nullable=True)
    op.alter_column('threads', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               existing_nullable=True)
    op.alter_column('threads', 'archived',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('threads', 'notes',
               existing_type=sa.TEXT(),
               comment='Internal notes',
               existing_nullable=True)
    op.alter_column('threads', 'extra_metadata',
               existing_type=sa.TEXT(),
               comment='JSON metadata storage',
               existing_nullable=True)
    op.alter_column('threads', 'is_deleted',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               nullable=False)
    op.create_index(op.f('ix_threads_deleted_at'), 'threads', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_threads_is_deleted'), 'threads', ['is_deleted'], unique=False)
    op.add_column('tickets', sa.Column('organization_id', sa.UUID(), nullable=False, comment='Organization to which the ticket belongs'))
    op.add_column('tickets', sa.Column('integration_id', sa.UUID(), nullable=True, comment='Integration platform for routing (jira, servicenow, etc.)'))
    op.drop_index(op.f('ix_tickets_integration_routing'), table_name='tickets')
    op.create_index(op.f('ix_tickets_integration_id'), 'tickets', ['integration_id'], unique=False)
    op.create_index(op.f('ix_tickets_organization_id'), 'tickets', ['organization_id'], unique=False)
    op.create_foreign_key(None, 'tickets', 'integrations', ['integration_id'], ['id'])
    op.create_foreign_key(None, 'tickets', 'organizations', ['organization_id'], ['id'])
    op.drop_column('tickets', 'integration_routing')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('tickets', sa.Column('integration_routing', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Integration platform for routing (jira, servicenow, etc.)'))
    op.drop_constraint(None, 'tickets', type_='foreignkey')
    op.drop_constraint(None, 'tickets', type_='foreignkey')
    op.drop_index(op.f('ix_tickets_organization_id'), table_name='tickets')
    op.drop_index(op.f('ix_tickets_integration_id'), table_name='tickets')
    op.create_index(op.f('ix_tickets_integration_routing'), 'tickets', ['integration_routing'], unique=False)
    op.drop_column('tickets', 'integration_id')
    op.drop_column('tickets', 'organization_id')
    op.drop_index(op.f('ix_threads_is_deleted'), table_name='threads')
    op.drop_index(op.f('ix_threads_deleted_at'), table_name='threads')
    op.alter_column('threads', 'is_deleted',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               nullable=True)
    op.alter_column('threads', 'extra_metadata',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='JSON metadata storage',
               existing_nullable=True)
    op.alter_column('threads', 'notes',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='Internal notes',
               existing_nullable=True)
    op.alter_column('threads', 'archived',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('threads', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               existing_nullable=True)
    op.alter_column('threads', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               existing_nullable=True)
    op.drop_index(op.f('ix_messages_updated_at'), table_name='messages')
    op.drop_index(op.f('ix_messages_is_deleted'), table_name='messages')
    op.drop_index(op.f('ix_messages_deleted_at'), table_name='messages')
    op.alter_column('messages', 'is_deleted',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               nullable=True)
    op.alter_column('messages', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               nullable=True)
    op.alter_column('messages', 'extra_metadata',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='JSON metadata storage',
               existing_nullable=True)
    op.alter_column('messages', 'notes',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='Internal notes',
               existing_nullable=True)
    op.alter_column('messages', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               existing_nullable=True)
    op.drop_constraint(None, 'agents', type_='unique')
    op.alter_column('agents', 'organization_id',
               existing_type=sa.UUID(),
               nullable=True,
               existing_comment='Organization this agent belongs to')
    op.drop_constraint(None, 'agent_tasks', type_='unique')
    op.drop_constraint(None, 'agent_history', type_='unique')
    op.drop_constraint(None, 'agent_files', type_='unique')
    op.drop_constraint(None, 'agent_actions', type_='unique')
    op.create_table('chat_conversations_archived',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('is_archived', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('is_auditable', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('retention_days', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_messages', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_tokens_used', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True, comment='Internal notes'),
    sa.Column('extra_metadata', sa.TEXT(), autoincrement=False, nullable=True, comment='JSON metadata storage'),
    sa.PrimaryKeyConstraint('id', name=op.f('chat_conversations_pkey'))
    )
    op.create_index(op.f('idx_chat_conversation_user_title'), 'chat_conversations_archived', ['user_id', 'title'], unique=False)
    op.create_index(op.f('idx_chat_conversation_user_deleted'), 'chat_conversations_archived', ['user_id', 'is_deleted'], unique=False)
    op.create_index(op.f('idx_chat_conversation_user'), 'chat_conversations_archived', ['user_id'], unique=False)
    op.create_index(op.f('idx_chat_conversation_updated'), 'chat_conversations_archived', ['updated_at'], unique=False)
    op.create_index(op.f('idx_chat_conversation_title_search'), 'chat_conversations_archived', ['title'], unique=False)
    op.create_index(op.f('idx_chat_conversation_deleted'), 'chat_conversations_archived', ['is_deleted'], unique=False)
    # ### end Alembic commands ###