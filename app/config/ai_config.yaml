# AI-Powered Customer Support Configuration
# Configure AI providers, models, and settings for ticket creation and categorization

# =============================================================================
# AI Provider Configuration
# =============================================================================

ai_providers:
  # OpenAI Configuration
  openai:
    enabled: true
    api_key: ${OPENAI_API_KEY}  # Environment variable reference
    api_key_file: null  # Optional: path to file containing API key
    base_url: null  # Optional: custom API endpoint
    organization: null  # Optional: OpenAI organization ID
    
    # Available models and their configurations
    models:
      primary:
        name: "gpt-4o-mini"
        max_tokens: 2000
        temperature: 0.2
        timeout: 30
        cost_per_1k_tokens: 0.00015  # For cost tracking
        
      backup:
        name: "gpt-4"
        max_tokens: 2000
        temperature: 0.2
        timeout: 30
        cost_per_1k_tokens: 0.03
        
      fast:
        name: "gpt-3.5-turbo"
        max_tokens: 1500
        temperature: 0.1
        timeout: 15
        cost_per_1k_tokens: 0.001
        
      # File analysis model for OCR and transcription
      file_analysis:
        name: "gpt-4o"
        max_tokens: 1500
        temperature: 0.1
        timeout: 45
        cost_per_1k_tokens: 0.0025

  # Google Gemini Configuration  
  google:
    enabled: true
    api_key: ${GEMINI_API_KEY}  # Environment variable reference
    api_key_file: null  # Optional: path to file containing API key
    
    # Available models and their configurations
    models:
      primary:
        name: "gemini-1.5-pro"
        max_output_tokens: 2000
        temperature: 0.2
        timeout: 30
        cost_per_1k_tokens: 0.00125
        
      fast:
        name: "gemini-1.5-flash"
        max_output_tokens: 1500
        temperature: 0.1
        timeout: 15
        cost_per_1k_tokens: 0.00037
        
      experimental:
        name: "gemini-1.0-pro"
        max_output_tokens: 1500
        temperature: 0.1
        timeout: 30
        cost_per_1k_tokens: 0.00050

# =============================================================================
# AI Strategy Configuration
# =============================================================================

ai_strategy:
  # Primary provider to use first
  primary_provider: "openai"  # "openai" or "google"
  
  # Fallback chain - order of providers to try if primary fails
  fallback_chain: ["google", "openai"]
  
  # Model selection strategy per provider
  model_strategy:
    openai: "primary"  # primary, backup, fast, file_analysis
    google: "fast"     # primary, fast, experimental
  
  # Retry configuration
  max_retries: 2
  retry_delay: 1.0  # seconds
  
  # Performance thresholds
  performance:
    max_generation_time: 15.0  # seconds
    preferred_generation_time: 5.0  # seconds
    auto_fallback_on_timeout: true
    
  # Cost controls
  cost_limits:
    max_cost_per_ticket: 0.10  # USD
    daily_cost_limit: 50.00  # USD
    monthly_cost_limit: 500.00  # USD

# =============================================================================
# Agent-Specific Configuration
# =============================================================================

agents:
  customer_support_agent:
    model_provider: "openai"
    model_name: "primary"
    temperature: 0.2
    max_tokens: 2000
    timeout: 30
    system_prompt_template: "customer_support_default"
    tools_enabled: ["analyze_file", "create_ticket", "categorize_issue", "search_knowledge_base"]
    confidence_threshold: 0.7
    
  categorization_agent:
    model_provider: "openai"
    model_name: "fast"
    temperature: 0.1  # Lower temperature for consistent categorization
    max_tokens: 500
    timeout: 15
    system_prompt_template: "categorization_default"
    tools_enabled: ["categorize_issue"]
    confidence_threshold: 0.8
    
  file_analysis_agent:
    model_provider: "openai"
    model_name: "file_analysis"
    temperature: 0.1
    max_tokens: 1500
    timeout: 45
    system_prompt_template: "file_analysis_default"
    tools_enabled: ["analyze_file", "extract_text_from_image", "transcribe_audio"]
    confidence_threshold: 0.6

# =============================================================================
# Caching Configuration
# =============================================================================

caching:
  # Function caching
  function_cache:
    enabled: true
    max_size: 10000  # Number of cached functions
    ttl: 604800  # 7 days in seconds
    
  # Result caching
  result_cache:
    enabled: true
    max_size: 50000  # Number of cached results
    ttl: 86400  # 24 hours in seconds
    
  # Pattern learning cache
  pattern_cache:
    enabled: true
    max_size: 1000  # Number of learned patterns
    ttl: 2592000  # 30 days in seconds

# =============================================================================
# Quality and Safety Configuration
# =============================================================================

quality_control:
  # Input validation settings
  validation:
    enabled: true
    max_input_length: 50000  # Maximum characters in user input
    timeout: 5.0  # seconds for validation
    
  # Confidence scoring
  confidence:
    min_acceptable_score: 0.7
    auto_retry_below_threshold: true
    require_human_review_below: 0.5
    
  # Safety measures
  safety:
    content_filtering: true
    max_processing_time: 60.0  # seconds
    blacklisted_patterns: ["ignore previous", "system:", "forget instructions"]
    max_file_size: 104857600  # 100MB

# =============================================================================
# Monitoring and Analytics
# =============================================================================

monitoring:
  # Performance tracking
  performance_tracking:
    enabled: true
    detailed_metrics: true
    store_execution_logs: true
    
  # Error tracking
  error_tracking:
    enabled: true
    store_error_details: true
    alert_on_high_error_rate: true
    error_rate_threshold: 0.1  # 10%
    
  # Usage analytics
  usage_analytics:
    enabled: true
    track_rate_patterns: true
    track_model_performance: true
    export_metrics: true

# =============================================================================
# Development and Testing Configuration
# =============================================================================

development:
  # Debug settings
  debug_mode: false
  verbose_logging: false
  save_generated_responses: false  # Save AI responses to files
  
  # Testing settings
  test_mode: false
  use_mock_responses: false
  mock_generation_delay: 0.1  # seconds
  
  # Development overrides
  force_provider: null  # Force specific provider for testing
  force_model: null     # Force specific model for testing

# =============================================================================
# Environment-Specific Overrides
# =============================================================================

environments:
  production:
    ai_strategy:
      primary_provider: "openai"
      model_strategy:
        openai: "primary"
        google: "primary"
    quality_control:
      confidence:
        min_acceptable_score: 0.8
    development:
      debug_mode: false
      verbose_logging: false
      
  staging:
    ai_strategy:
      primary_provider: "google"
      model_strategy:
        openai: "backup"
        google: "fast"
    development:
      debug_mode: true
      verbose_logging: true
      
  development:
    ai_strategy:
      max_retries: 1
    cost_limits:
      daily_cost_limit: 10.00
      monthly_cost_limit: 50.00
    development:
      debug_mode: true
      verbose_logging: true
      save_generated_responses: true
      
  testing:
    development:
      test_mode: true
      use_mock_responses: true
    caching:
      function_cache:
        enabled: false
      result_cache:
        enabled: false

# =============================================================================
# Feature Flags
# =============================================================================

features:
  # Experimental features
  experimental_models: false
  multi_provider_ensemble: false  # Use multiple providers for consensus
  adaptive_model_selection: false  # Auto-select best model based on performance
  
  # Advanced features
  pattern_learning: true
  user_feedback_learning: true
  automatic_retraining: false
  
  # Integration features
  webhook_notifications: false
  external_monitoring: false
  api_usage_reporting: true

# =============================================================================
# Prompt Templates Configuration
# =============================================================================

prompt_templates:
  customer_support_default: |
    You are an expert customer support agent helping users create detailed support tickets.
    
    Your role is to:
    1. Analyze user requests, attachments, and context from Chrome extension
    2. Create comprehensive, well-structured support tickets
    3. Categorize tickets by urgency, type, and department
    4. Extract relevant information from uploaded files (screenshots, recordings, documents)
    5. Route tickets to appropriate teams or integrations (Jira, Salesforce, etc.)
    
    When creating tickets:
    - Use clear, professional language
    - Include all relevant context from user input and files
    - Set appropriate priority levels based on issue severity
    - Add relevant tags and categories for easy filtering
    - Include steps to reproduce if provided
    - Attach processed file analysis (transcriptions, OCR results)
    
    Available tools via MCP:
    - analyze_file: Process uploaded files for text/audio extraction  
    - create_ticket: Create tickets in the system
    - categorize_issue: Auto-categorize based on content
    - search_knowledge_base: Find existing solutions
    
    Always be helpful, thorough, and ensure tickets contain actionable information.

  categorization_default: |
    You are an AI agent specialized in categorizing customer support tickets.
    
    Analyze the provided ticket content and categorize it based on:
    - Issue type (technical, billing, feature_request, bug, user_access, general)
    - Priority level (low, medium, high, critical)
    - Department (engineering, support, billing, sales, product)
    - Urgency (low, medium, high, critical)
    
    Consider factors like:
    - Keywords and phrases indicating severity
    - Customer impact and business criticality
    - Technical complexity
    - Time sensitivity
    
    Provide confidence scores for your categorization decisions.

  file_analysis_default: |
    You are an AI agent specialized in analyzing uploaded files for customer support tickets.
    
    Your capabilities include:
    - Transcribing audio and video files
    - Extracting text from images using OCR
    - Analyzing document content
    - Identifying error messages, screenshots, and diagnostic information
    - Summarizing file content for ticket context
    
    For each file analysis:
    - Extract all relevant text and information
    - Identify key error messages or issues shown
    - Provide a summary of findings
    - Suggest relevant ticket categories based on file content
    - Include confidence scores for extracted information
    
    Focus on information that would be helpful for support agents and ticket resolution.