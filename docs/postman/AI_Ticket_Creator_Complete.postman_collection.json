{
	"info": {
		"_postman_id": "ai-ticket-creator-complete-2025",
		"name": "AI Ticket Creator Backend API - Complete (Agent + Integration + Member Management)",
		"description": "Complete API collection for AI-powered ticket creation and management system with refactored multi-agent architecture, integration system, and comprehensive member management.\n\n## Features\n- **Member Management System**: Complete organization member management with role-based access control\n- **Organization Discovery**: Domain-based organization matching during registration\n- **Invitation System**: Secure invitation workflow with email notifications\n- **Multi-Agent System**: Multiple agents per organization with embedded configuration\n- **Agent Management**: CRUD operations with change history tracking\n- **User authentication and organization management**\n- **AI-powered ticket creation and management**\n- **Chat Assistant**: Real-time AI chat with conversation management\n- **File processing**: OCR, transcription, and agent context integration\n- **Third-party integrations**: JIRA, Salesforce, GitHub, Webhooks, etc.\n- **Real-time WebSocket communications**\n\n## Member Management Features\n1. **Role-Based Access**: Admin and Member roles with proper permission enforcement\n2. **Invitation System**: Secure token-based invitations with expiration\n3. **Organization Discovery**: Domain-based organization matching for seamless registration\n4. **Security Controls**: Self-role modification prevention, last admin protection\n5. **Auto-Admin Promotion**: Automatic admin promotion when last admin is removed\n6. **Cross-Organization Isolation**: Complete data isolation between organizations\n\n## Integration Architecture (REFACTORED)\nThe system now uses semantic integration categories:\n1. **Category-Based System**: 7 functional categories (ticketing, crm, messaging, communication, project_management, code_repository, webhook)\n2. **Platform Identification**: Separate platform_name field (jira, slack, salesforce, etc.)\n3. **Automatic Status Management**: enabled=false automatically sets status=inactive\n4. **ID-Based Routing**: Tickets use integration_id instead of integration_name\n5. **Clean Architecture**: All deprecated IntegrationType enum removed\n\n## Agent Architecture\nThe system supports:\n1. **Multiple Agents per Organization**: No singleton constraints\n2. **Embedded Configuration**: 20+ typed fields instead of JSON blob\n3. **Change History Tracking**: Complete audit trail with rollback capabilities\n4. **File Context Processing**: Up to 20 files per agent with text extraction\n5. **Autonomous Task Processing**: Queue-based multi-channel operations\n6. **Simplified API**: 6 CRUD + history endpoints\n\n## Agent-Centric Chat System\nThe chat system is fully agent-centric with:\n1. **Thread Management**: Create, read, update, delete threads per agent\n2. **Message Handling**: Send messages and receive AI responses\n3. **Context Awareness**: Agents use their configuration and file context\n4. **Real-time Processing**: WebSocket support for live conversations\n5. **Title Generation**: AI-powered thread title suggestions\n6. **Search & Filtering**: Find threads by content, archive status, etc.\n\n## Authentication\nAll protected endpoints require JWT authentication. Use the login flow to get access tokens.\n\n## Base URL\nLocal Development: http://localhost:8000",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "ai-ticket-creator"
	},
	"item": [
		{
			"name": "üîê Authentication",
			"item": [
				{
					"name": "Check Email Availability",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{TEST_EMAIL}}\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/auth/check-email",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "auth", "check-email"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Email availability check works\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Register User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{USER_EMAIL}}\",\n  \"password\": \"{{USER_PASSWORD}}\",\n  \"full_name\": \"{{USER_FULL_NAME}}\",\n  \"organization_name\": \"{{ORGANIZATION_NAME}}\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/auth/register",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "auth", "register"]
						}
					}
				},
				{
					"name": "Login",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{USER_EMAIL}}\",\n  \"password\": \"{{USER_PASSWORD}}\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/auth/login",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "auth", "login"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login successful\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access_token');",
									"    pm.environment.set('ACCESS_TOKEN', jsonData.access_token);",
									"    pm.environment.set('REFRESH_TOKEN', jsonData.refresh_token);",
									"    pm.environment.set('USER_ID', jsonData.user_id);",
									"    pm.environment.set('ORGANIZATION_ID', jsonData.organization_id);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Get Current User",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/auth/me",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "auth", "me"]
						}
					}
				},
				{
					"name": "Refresh Token",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refresh_token\": \"{{REFRESH_TOKEN}}\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/auth/refresh",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "auth", "refresh"]
						}
					}
				},
				{
					"name": "Logout",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/auth/logout",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "auth", "logout"]
						}
					}
				}
			]
		},
		{
			"name": "ü§ñ Agent Management (NEW ARCHITECTURE)",
			"item": [
				{
					"name": "Create Agent",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Customer Support Specialist\",\n    \"agent_type\": \"customer_support\",\n    \"avatar_url\": \"https://example.com/support-avatar.png\",\n    \"role\": \"Specialized customer support agent for technical inquiries and issue resolution\",\n    \"prompt\": \"You are a helpful customer support specialist with expertise in technical issues. Be professional, thorough, and solution-focused. Always aim to resolve issues efficiently.\",\n    \"initial_context\": \"Welcome! I'm here to help you resolve any issues you may be experiencing. Please describe your problem in detail.\",\n    \"initial_ai_msg\": \"Hello! I'm your customer support specialist. How can I help you today?\",\n    \"tone\": \"helpful\",\n    \"communication_style\": \"professional\",\n    \"use_streaming\": true,\n    \"response_length\": \"detailed\",\n    \"memory_retention\": 10,\n    \"show_suggestions_after_each_message\": true,\n    \"max_context_size\": 150000,\n    \"use_memory_context\": true,\n    \"max_iterations\": 8,\n    \"timeout_seconds\": 120,\n    \"tools_enabled\": [\"create_ticket\", \"search_tickets\", \"get_ticket\", \"update_ticket\", \"get_system_health\"]\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/agents",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "agents"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Agent created successfully\", function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.name).to.eql('Customer Support Specialist');",
									"    pm.environment.set('AGENT_ID', jsonData.id);",
									"});",
									"",
									"pm.test(\"Embedded configuration working\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('role');",
									"    pm.expect(jsonData).to.have.property('prompt');",
									"    pm.expect(jsonData).to.have.property('avatar_url');",
									"    pm.expect(jsonData.tools_enabled).to.be.an('array');",
									"    pm.expect(jsonData.tools_enabled.length).to.be.greaterThan(0);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Get Agent",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/agents/{{AGENT_ID}}",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "agents", "{{AGENT_ID}}"]
						}
					}
				},
				{
					"name": "List Agents",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/agents?page=1&limit=20",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "agents"],
							"query": [
								{"key": "page", "value": "1"},
								{"key": "limit", "value": "20"}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Agent list structure correct\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('agents');",
									"    pm.expect(jsonData).to.have.property('total');",
									"    pm.expect(jsonData.agents).to.be.an('array');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Update Agent Configuration",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tone\": \"friendly\",\n    \"communication_style\": \"casual\",\n    \"response_length\": \"brief\",\n    \"memory_retention\": 15,\n    \"tools_enabled\": [\"create_ticket\", \"search_tickets\", \"get_ticket\", \"update_ticket\", \"get_system_health\", \"list_integrations\"]\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/agents/{{AGENT_ID}}",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "agents", "{{AGENT_ID}}"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Agent update with history tracking\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.tone).to.eql('friendly');",
									"    pm.expect(jsonData.memory_retention).to.eql(15);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Get Agent Change History",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/agents/{{AGENT_ID}}/history?page=1&limit=10",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "agents", "{{AGENT_ID}}", "history"],
							"query": [
								{"key": "page", "value": "1"},
								{"key": "limit", "value": "10"}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Change history tracking working\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('history');",
									"    pm.expect(jsonData.history).to.be.an('array');",
									"    console.log('History records found:', jsonData.history.length);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Create Second Agent (Multi-Agent Test)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Sales Assistant\",\n    \"agent_type\": \"sales\",\n    \"avatar_url\": \"https://example.com/sales-avatar.png\",\n    \"role\": \"Sales support specialist for lead qualification and customer onboarding\",\n    \"communication_style\": \"persuasive\",\n    \"tone\": \"enthusiastic\",\n    \"response_length\": \"moderate\",\n    \"tools_enabled\": [\"create_ticket\", \"search_tickets\", \"list_integrations\"]\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/agents",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "agents"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Second agent created (multi-agent validation)\", function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set('SECOND_AGENT_ID', jsonData.id);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Delete Agent",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/agents/{{SECOND_AGENT_ID}}",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "agents", "{{SECOND_AGENT_ID}}"]
						}
					}
				}
			]
		},
		{
			"name": "üí¨ Agent-Centric Chat",
			"item": [
				{
					"name": "List Threads",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/chat/{{AGENT_ID}}/threads?page=1&page_size=20&archived=false&q=support",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "chat", "{{AGENT_ID}}", "threads"],
							"query": [
								{"key": "page", "value": "1"},
								{"key": "page_size", "value": "20"},
								{"key": "archived", "value": "false"},
								{"key": "q", "value": "support"}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Threads listed successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('threads');",
									"    pm.expect(jsonData).to.have.property('total');",
									"    pm.expect(jsonData).to.have.property('agent_id');",
									"    pm.expect(jsonData.threads).to.be.an('array');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Create Thread",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Technical Support Thread\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/chat/{{AGENT_ID}}/threads",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "chat", "{{AGENT_ID}}", "threads"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Thread created\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set('THREAD_ID', jsonData.id);",
									"    pm.test('Response has agent_id', function() {",
									"        pm.expect(jsonData).to.have.property('agent_id');",
									"    });",
									"    pm.test('Response has total_messages', function() {",
									"        pm.expect(jsonData).to.have.property('total_messages');",
									"    });",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Get Thread",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/chat/{{AGENT_ID}}/threads/{{THREAD_ID}}?include_messages=true",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "chat", "{{AGENT_ID}}", "threads", "{{THREAD_ID}}"],
							"query": [
								{"key": "include_messages", "value": "true"}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Thread retrieved successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('agent_id');",
									"    pm.expect(jsonData).to.have.property('messages');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Update Thread",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Updated Technical Support Thread\",\n    \"archived\": false\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/chat/{{AGENT_ID}}/threads/{{THREAD_ID}}",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "chat", "{{AGENT_ID}}", "threads", "{{THREAD_ID}}"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Thread updated successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('updated_fields');",
									"    pm.expect(jsonData.title).to.eql('Updated Technical Support Thread');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Delete Thread",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/chat/{{AGENT_ID}}/threads/{{THREAD_ID}}",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "chat", "{{AGENT_ID}}", "threads", "{{THREAD_ID}}"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Thread deleted successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.eql('Thread deleted successfully');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Send Message",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"The extension shows 'Connection failed' when I try to create tickets. I've checked the API key and it seems correct.\",\n    \"role\": \"user\",\n    \"attachments\": [],\n    \"message_metadata\": {\n        \"source\": \"postman_test\",\n        \"browser\": \"chrome\",\n        \"timestamp\": \"2025-01-01T12:00:00Z\"\n    }\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/chat/{{AGENT_ID}}/threads/{{THREAD_ID}}/messages",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "chat", "{{AGENT_ID}}", "threads", "{{THREAD_ID}}", "messages"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Message sent successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('content');",
									"    pm.expect(jsonData).to.have.property('role');",
									"    pm.expect(jsonData.thread_id).to.eql(pm.environment.get('THREAD_ID'));",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Get Thread Messages",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/chat/{{AGENT_ID}}/threads/{{THREAD_ID}}/messages?page=1&page_size=100",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "chat", "{{AGENT_ID}}", "threads", "{{THREAD_ID}}", "messages"],
							"query": [
								{"key": "page", "value": "1"},
								{"key": "page_size", "value": "100"}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Messages retrieved successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('messages');",
									"    pm.expect(jsonData).to.have.property('thread_id');",
									"    pm.expect(jsonData.messages).to.be.an('array');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Generate Thread Title",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/chat/{{AGENT_ID}}/threads/{{THREAD_ID}}/generate_title",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "chat", "{{AGENT_ID}}", "threads", "{{THREAD_ID}}", "generate_title"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Title generated successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('title');",
									"    pm.expect(jsonData).to.have.property('confidence');",
									"    pm.expect(jsonData).to.have.property('generated_at');",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "üé´ Ticket Management",
			"item": [
				{
					"name": "List Tickets",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/tickets?page=1&limit=20",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "tickets"],
							"query": [
								{"key": "page", "value": "1"},
								{"key": "limit", "value": "20"}
							]
						}
					}
				},
				{
					"name": "Create Ticket",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Login Issues with Chrome Extension\",\n    \"description\": \"Users are experiencing authentication failures when trying to log in through the Chrome extension. The error occurs intermittently.\",\n    \"priority\": \"high\",\n    \"category\": \"technical\",\n    \"integration_id\": \"{{INTEGRATION_ID}}\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/tickets",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "tickets"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ticket created successfully\", function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set('TICKET_ID', jsonData.ticket.id);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Create Ticket with AI",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"message\": \"My Chrome extension keeps crashing when I try to create tickets. It shows a 'Network Error' and then stops working. This happens on both Chrome and Edge browsers.\",\n    \"integration_id\": \"{{INTEGRATION_ID}}\",\n    \"metadata\": {\n        \"browser\": \"Chrome/Edge\",\n        \"error_type\": \"Network Error\",\n        \"frequency\": \"Always\"\n    }\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/tickets/ai-create",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "tickets", "ai-create"]
						}
					}
				},
				{
					"name": "Get Ticket",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/tickets/{{TICKET_ID}}",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "tickets", "{{TICKET_ID}}"]
						}
					}
				},
				{
					"name": "Update Ticket",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"in_progress\",\n    \"description\": \"Updated: Investigation shows this is related to CORS configuration in the extension manifest.\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/tickets/{{TICKET_ID}}",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "tickets", "{{TICKET_ID}}"]
						}
					}
				},
				{
					"name": "Create Ticket with Integration ID (New)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Integration ID Test Ticket\",\n    \"description\": \"Testing the new integration_id field instead of integration_name\",\n    \"priority\": \"medium\",\n    \"category\": \"technical\",\n    \"integration_id\": \"{{INTEGRATION_ID}}\",\n    \"create_externally\": false\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/tickets",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "tickets"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ticket created with integration_id\", function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.ticket).to.have.property('integration_id');",
									"    pm.expect(jsonData.ticket.integration_id).to.eql(pm.environment.get('INTEGRATION_ID'));",
									"    pm.environment.set('REFACTOR_TEST_TICKET_ID', jsonData.ticket.id);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Get Ticket Stats",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/tickets/stats/overview",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "tickets", "stats", "overview"]
						}
					}
				}
			]
		},
		{
			"name": "üë§ User Management",
			"item": [
				{
					"name": "Update User Profile",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"full_name\": \"Updated User Name\",\n    \"notification_preferences\": {\n        \"email_notifications\": true,\n        \"slack_notifications\": false\n    }\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/auth/me",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "auth", "me"]
						}
					}
				},
				{
					"name": "Upload User Avatar",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "avatar",
									"type": "file",
									"src": "/path/to/avatar.png"
								}
							]
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/users/{{USER_ID}}/avatar",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "users", "{{USER_ID}}", "avatar"]
						}
					}
				},
				{
					"name": "Get User Avatar",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/users/{{USER_ID}}/avatar",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "users", "{{USER_ID}}", "avatar"]
						}
					}
				}
			]
		},
		{
			"name": "üîó Integrations",
			"item": [
				{
					"name": "Create Integration",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"JIRA Production\",\n    \"integration_category\": \"ticketing\",\n    \"platform_name\": \"jira\",\n    \"enabled\": true,\n    \"base_url\": \"{{JIRA_URL}}\",\n    \"auth_type\": \"api_key\",\n    \"credentials\": {\n        \"email\": \"{{JIRA_EMAIL}}\",\n        \"api_token\": \"{{JIRA_API_TOKEN}}\"\n    },\n    \"configuration\": {\n        \"project_key\": \"{{JIRA_PROJECT_KEY}}\"\n    },\n    \"metadata\": {\n        \"environment\": \"production\",\n        \"team\": \"support\"\n    }\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/integrations/",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "integrations", ""]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"JIRA integration created with new schema\", function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set('INTEGRATION_ID', jsonData.id);",
									"    ",
									"    // Validate new schema structure",
									"    pm.expect(jsonData).to.have.property('integration_category');", 
									"    pm.expect(jsonData).to.have.property('platform_name');",
									"    pm.expect(jsonData).to.have.property('enabled');",
									"    pm.expect(jsonData.integration_category).to.eql('ticketing');",
									"    pm.expect(jsonData.platform_name).to.eql('jira');",
									"    pm.expect(jsonData.enabled).to.be.a('boolean');",
									"    ",
									"    // Ensure deprecated fields are not present",
									"    pm.expect(jsonData).to.not.have.property('integration_type');",
									"    pm.expect(jsonData).to.not.have.property('is_enabled');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Create Slack Integration",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Slack Support Channel\",\n    \"integration_category\": \"messaging\",\n    \"platform_name\": \"slack\",\n    \"enabled\": true,\n    \"auth_type\": \"api_key\",\n    \"credentials\": {\n        \"bot_token\": \"{{SLACK_BOT_TOKEN}}\",\n        \"channel\": \"{{SLACK_CHANNEL}}\"\n    },\n    \"configuration\": {\n        \"default_channel\": \"#support\",\n        \"thread_replies\": true\n    },\n    \"metadata\": {\n        \"environment\": \"production\",\n        \"team\": \"support\"\n    }\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/integrations/",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "integrations", ""]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Slack integration created\", function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.integration_category).to.eql('messaging');",
									"    pm.expect(jsonData.platform_name).to.eql('slack');",
									"    pm.environment.set('SLACK_INTEGRATION_ID', jsonData.id);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "List Integrations",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/integrations/?integration_category=ticketing&enabled=true",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "integrations", ""],
							"query": [
								{"key": "integration_category", "value": "ticketing"},
								{"key": "enabled", "value": "true"}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Integration list with category filter works\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    if (jsonData.length > 0) {",
									"        pm.expect(jsonData[0]).to.have.property('integration_category');",
									"        pm.expect(jsonData[0]).to.have.property('platform_name');",
									"        pm.expect(jsonData[0]).to.have.property('enabled');",
									"    }",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Get Integration",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/integrations/{{INTEGRATION_ID}}",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "integrations", "{{INTEGRATION_ID}}"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Integration retrieved successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('integration_category');",
									"    pm.expect(jsonData).to.have.property('platform_name');",
									"    pm.expect(jsonData).to.have.property('enabled');",
									"    pm.expect(jsonData).to.have.property('status');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Update Integration",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"JIRA Production Updated\",\n    \"enabled\": true,\n    \"auth_type\": \"api_key\",\n    \"credentials\": {\n        \"email\": \"{{JIRA_EMAIL}}\",\n        \"api_token\": \"{{JIRA_API_TOKEN}}\"\n    },\n    \"configuration\": {\n        \"project_key\": \"{{JIRA_PROJECT_KEY}}\",\n        \"issue_type_mapping\": {\n            \"bug\": \"Bug\",\n            \"feature\": \"Story\",\n            \"task\": \"Task\"\n        }\n    },\n    \"metadata\": {\n        \"environment\": \"production\",\n        \"team\": \"support\",\n        \"last_updated\": \"2025-01-01T12:00:00Z\"\n    }\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/integrations/{{INTEGRATION_ID}}",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "integrations", "{{INTEGRATION_ID}}"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Integration updated successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('enabled');",
									"    pm.expect(jsonData).to.have.property('integration_category');",
									"    pm.expect(jsonData).to.have.property('platform_name');",
									"    pm.expect(jsonData.name).to.eql('JIRA Production Updated');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Delete Integration",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/integrations/{{INTEGRATION_ID}}",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "integrations", "{{INTEGRATION_ID}}"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Integration deleted successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.include('deleted');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Test Integration",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"test_connection\": true,\n    \"validate_credentials\": true,\n    \"check_permissions\": true\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/integrations/{{INTEGRATION_ID}}/test",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "integrations", "{{INTEGRATION_ID}}", "test"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Integration test completed\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('test_result');",
									"    pm.expect(jsonData).to.have.property('connection_status');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Sync Integration",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"sync_type\": \"full\",\n    \"options\": {\n        \"force_update\": false,\n        \"dry_run\": false\n    }\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/integrations/{{INTEGRATION_ID}}/sync",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "integrations", "{{INTEGRATION_ID}}", "sync"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Integration sync completed\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('sync_status');",
									"    pm.expect(jsonData).to.have.property('sync_timestamp');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Disable Integration (Auto Status Management)",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"enabled\": false,\n    \"reason\": \"Temporarily disabling for maintenance\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/integrations/{{INTEGRATION_ID}}/status",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "integrations", "{{INTEGRATION_ID}}", "status"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Integration disabled successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.enabled).to.eql(false);",
									"    pm.expect(jsonData.status).to.eql('inactive');  // Auto status management",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Enable Integration (Auto Status Management)",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"enabled\": true,\n    \"reason\": \"Re-enabling after maintenance completion\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/integrations/{{INTEGRATION_ID}}/status",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "integrations", "{{INTEGRATION_ID}}", "status"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Integration enabled successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.enabled).to.eql(true);",
									"    // Status should be active or pending based on health",
									"    pm.expect(['active', 'pending']).to.include(jsonData.status);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Update Integration Status",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"enabled\": true,\n    \"reason\": \"Integration enabled after successful testing\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/integrations/{{INTEGRATION_ID}}/status",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "integrations", "{{INTEGRATION_ID}}", "status"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Integration status updated successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('enabled');",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('reason');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Get Active Integrations",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/integrations/active",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "integrations", "active"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Active integrations retrieved\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    ",
									"    jsonData.forEach(function(integration) {",
									"        pm.expect(integration).to.have.property('enabled');",
									"        pm.expect(integration.enabled).to.eql(true);",
									"        pm.expect(integration).to.have.property('status');",
									"        pm.expect(integration).to.have.property('integration_category');",
									"        pm.expect(integration).to.have.property('platform_name');",
									"    });",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Activate Integration",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"activate\": true,\n    \"validation_required\": true\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/integrations/{{INTEGRATION_ID}}/activate",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "integrations", "{{INTEGRATION_ID}}", "activate"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Integration activated successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('activation_status');",
									"    pm.expect(jsonData).to.have.property('validation_result');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Get Integration Fields",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/integrations/{{INTEGRATION_ID}}/fields",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "integrations", "{{INTEGRATION_ID}}", "fields"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Integration fields retrieved\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('fields');",
									"    pm.expect(jsonData.fields).to.be.an('array');",
									"    ",
									"    if (jsonData.fields.length > 0) {",
									"        var field = jsonData.fields[0];",
									"        pm.expect(field).to.have.property('field_name');",
									"        pm.expect(field).to.have.property('field_type');",
									"        pm.expect(field).to.have.property('required');",
									"    }",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Create Webhook Integration",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Support Webhook\",\n    \"integration_category\": \"webhook\",\n    \"platform_name\": \"generic_webhook\",\n    \"enabled\": true,\n    \"auth_type\": \"bearer_token\",\n    \"base_url\": \"https://hooks.example.com/webhook\",\n    \"credentials\": {\n        \"bearer_token\": \"{{WEBHOOK_TOKEN}}\",\n        \"secret_key\": \"{{WEBHOOK_SECRET}}\"\n    },\n    \"configuration\": {\n        \"event_types\": [\"ticket.created\", \"ticket.updated\", \"ticket.resolved\"],\n        \"include_attachments\": false,\n        \"retry_attempts\": 3,\n        \"timeout_seconds\": 30\n    },\n    \"metadata\": {\n        \"environment\": \"production\",\n        \"team\": \"support\"\n    }\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/integrations/",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "integrations", ""]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Webhook integration created\", function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.integration_category).to.eql('webhook');",
									"    pm.expect(jsonData.platform_name).to.eql('generic_webhook');",
									"    pm.environment.set('WEBHOOK_INTEGRATION_ID', jsonData.id);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Create GitHub Integration",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"GitHub Repository\",\n    \"integration_category\": \"code_repository\",\n    \"platform_name\": \"github\",\n    \"enabled\": true,\n    \"auth_type\": \"oauth2\",\n    \"credentials\": {\n        \"access_token\": \"{{GITHUB_ACCESS_TOKEN}}\",\n        \"refresh_token\": \"{{GITHUB_REFRESH_TOKEN}}\"\n    },\n    \"configuration\": {\n        \"repository\": \"{{GITHUB_REPO}}\",\n        \"owner\": \"{{GITHUB_OWNER}}\",\n        \"default_branch\": \"main\",\n        \"issue_labels\": [\"bug\", \"enhancement\", \"support\"]\n    },\n    \"metadata\": {\n        \"environment\": \"production\",\n        \"team\": \"development\"\n    }\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/integrations/",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "integrations", ""]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GitHub integration created\", function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.integration_category).to.eql('code_repository');",
									"    pm.expect(jsonData.platform_name).to.eql('github');",
									"    pm.environment.set('GITHUB_INTEGRATION_ID', jsonData.id);",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "üè• System Health",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/health",
							"host": ["{{BASE_URL}}"],
							"path": ["health"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"System is healthy\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('healthy');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "MCP Server Health",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{MCP_URL}}/health",
							"host": ["{{MCP_URL}}"],
							"path": ["health"]
						}
					}
				},
				{
					"name": "API Documentation",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/docs",
							"host": ["{{BASE_URL}}"],
							"path": ["docs"]
						}
					}
				}
			]
		},
		{
			"name": "üß™ Agent System Testing",
			"item": [
				{
					"name": "Multi-Agent Organization Test",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// This folder tests the multi-agent capabilities",
									"console.log('Testing multi-agent system capabilities...');"
								]
							}
						}
					],
					"item": [
						{
							"name": "Create Customer Support Agent",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{ACCESS_TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Support Bot Alpha\",\n    \"agent_type\": \"customer_support\",\n    \"role\": \"Primary customer support agent\",\n    \"communication_style\": \"formal\",\n    \"tone\": \"professional\"\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/agents",
									"host": ["{{BASE_URL}}"],
									"path": ["api", "v1", "agents"]
								}
							},
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Support agent created\", function () {",
											"    pm.response.to.have.status(201);",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set('SUPPORT_AGENT_ID', jsonData.id);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Create Sales Agent",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{ACCESS_TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Sales Assistant Pro\",\n    \"agent_type\": \"sales\",\n    \"role\": \"Lead qualification and customer onboarding specialist\",\n    \"communication_style\": \"persuasive\",\n    \"tone\": \"enthusiastic\"\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/agents",
									"host": ["{{BASE_URL}}"],
									"path": ["api", "v1", "agents"]
								}
							},
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Sales agent created\", function () {",
											"    pm.response.to.have.status(201);",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set('SALES_AGENT_ID', jsonData.id);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Create Technical Agent",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{ACCESS_TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Tech Specialist\",\n    \"agent_type\": \"technical_support\",\n    \"role\": \"Advanced technical troubleshooting specialist\",\n    \"communication_style\": \"technical\",\n    \"tone\": \"precise\",\n    \"max_iterations\": 15,\n    \"timeout_seconds\": 180\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/agents",
									"host": ["{{BASE_URL}}"],
									"path": ["api", "v1", "agents"]
								}
							},
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Technical agent created\", function () {",
											"    pm.response.to.have.status(201);",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set('TECH_AGENT_ID', jsonData.id);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Verify Multiple Agents",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ACCESS_TOKEN}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/agents",
									"host": ["{{BASE_URL}}"],
									"path": ["api", "v1", "agents"]
								}
							},
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Multiple agents created successfully\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.total).to.be.at.least(3);",
											"    console.log('Total agents:', jsonData.total);",
											"    ",
											"    // Verify different agent types exist",
											"    var agentTypes = jsonData.agents.map(a => a.agent_type);",
											"    pm.expect(agentTypes).to.include('customer_support');",
											"    pm.expect(agentTypes).to.include('sales');",
											"    pm.expect(agentTypes).to.include('technical_support');",
											"});",
											"",
											"pm.test(\"No singleton constraint validation\", function () {",
											"    var jsonData = pm.response.json();",
											"    // Should be able to have multiple agents of same org",
											"    var orgIds = jsonData.agents.map(a => a.organization_id);",
											"    pm.expect(orgIds.length).to.be.greaterThan(0);",
											"});"
										]
									}
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "üîÑ Integration Refactor Validation",
			"item": [
				{
					"name": "Test All Integration Categories",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Test data for different integration categories",
									"console.log('üß™ Testing Integration Category System...');"
								]
							}
						}
					],
					"item": [
						{
							"name": "Create CRM Integration (Salesforce)",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{ACCESS_TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Salesforce CRM\",\n    \"integration_category\": \"crm\",\n    \"platform_name\": \"salesforce\",\n    \"enabled\": true,\n    \"auth_type\": \"oauth2\",\n    \"credentials\": {\n        \"client_id\": \"{{SALESFORCE_CLIENT_ID}}\",\n        \"client_secret\": \"{{SALESFORCE_CLIENT_SECRET}}\",\n        \"instance_url\": \"{{SALESFORCE_INSTANCE_URL}}\"\n    },\n    \"metadata\": {\n        \"environment\": \"production\",\n        \"team\": \"sales\"\n    }\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/integrations/",
									"host": ["{{BASE_URL}}"],
									"path": ["api", "v1", "integrations", ""]
								}
							},
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"CRM category integration created\", function () {",
											"    pm.response.to.have.status(201);",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.integration_category).to.eql('crm');",
											"    pm.expect(jsonData.platform_name).to.eql('salesforce');",
											"    pm.environment.set('CRM_INTEGRATION_ID', jsonData.id);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Create Project Management Integration", 
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{ACCESS_TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Asana Projects\",\n    \"integration_category\": \"project_management\",\n    \"platform_name\": \"asana\",\n    \"enabled\": true,\n    \"auth_type\": \"api_key\",\n    \"credentials\": {\n        \"api_key\": \"{{ASANA_API_KEY}}\"\n    },\n    \"configuration\": {\n        \"workspace_id\": \"{{ASANA_WORKSPACE_ID}}\",\n        \"project_id\": \"{{ASANA_PROJECT_ID}}\"\n    },\n    \"metadata\": {\n        \"environment\": \"production\",\n        \"team\": \"development\"\n    }\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/integrations/",
									"host": ["{{BASE_URL}}"],
									"path": ["api", "v1", "integrations", ""]
								}
							},
							"event": [
								{
									"listen": "test", 
									"script": {
										"exec": [
											"pm.test(\"Project management integration created\", function () {",
											"    pm.response.to.have.status(201);",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.integration_category).to.eql('project_management');",
											"    pm.expect(jsonData.platform_name).to.eql('asana');",
											"    pm.environment.set('PM_INTEGRATION_ID', jsonData.id);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Test Integration Category Filtering",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ACCESS_TOKEN}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/integrations/?integration_category=messaging",
									"host": ["{{BASE_URL}}"],
									"path": ["api", "v1", "integrations", ""],
									"query": [
										{"key": "integration_category", "value": "messaging"}
									]
								}
							},
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Category filtering works correctly\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an('array');",
											"    ",
											"    // All returned integrations should be messaging category",
											"    jsonData.forEach(function(integration) {",
											"        pm.expect(integration.integration_category).to.eql('messaging');",
											"    });",
											"});"
										]
									}
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "üë• Member Management (NEW)",
			"item": [
				{
					"name": "Organization Discovery",
					"item": [
						{
							"name": "Get Organization by Domain (Public)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/organizations/by-domain/{{TEST_DOMAIN}}",
									"host": ["{{BASE_URL}}"],
									"path": ["api", "v1", "organizations", "by-domain", "{{TEST_DOMAIN}}"]
								}
							},
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Organization discovery works\", function () {",
											"    if (pm.response.code === 200) {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData).to.have.property('organization');",
											"        pm.expect(jsonData.organization).to.have.property('domain');",
											"        pm.expect(jsonData.organization).to.have.property('name');",
											"        pm.expect(jsonData.organization).to.have.property('member_count');",
											"    } else {",
											"        pm.expect(pm.response.code).to.eql(404);",
											"    }",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Get Registration Options (Public)",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{USER_EMAIL}}\"\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/organizations/registration-options",
									"host": ["{{BASE_URL}}"],
									"path": ["api", "v1", "organizations", "registration-options"]
								}
							},
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Registration options provided\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('suggested_action');",
											"    pm.expect(jsonData).to.have.property('options');",
											"    pm.expect(jsonData).to.have.property('message');",
											"    pm.expect(jsonData.options).to.be.an('array');",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Check Domain Availability (Public)",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"domain\": \"{{TEST_DOMAIN}}\"\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/organizations/check-domain",
									"host": ["{{BASE_URL}}"],
									"path": ["api", "v1", "organizations", "check-domain"]
								}
							},
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Domain availability check works\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('domain');",
											"    pm.expect(jsonData).to.have.property('available');",
											"    pm.expect(jsonData).to.have.property('existing_count');",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Get Organization Directory (Admin Only)",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ACCESS_TOKEN}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/organizations/directory?search={{TEST_SEARCH}}&page=1&limit=50",
									"host": ["{{BASE_URL}}"],
									"path": ["api", "v1", "organizations", "directory"],
									"query": [
										{"key": "search", "value": "{{TEST_SEARCH}}"},
										{"key": "page", "value": "1"},
										{"key": "limit", "value": "50"}
									]
								}
							}
						}
					]
				},
				{
					"name": "Member Management",
					"item": [
						{
							"name": "List Organization Members",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ACCESS_TOKEN}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/organizations/{{ORGANIZATION_ID}}/members?role=admin&active=true&page=1&limit=50",
									"host": ["{{BASE_URL}}"],
									"path": ["api", "v1", "organizations", "{{ORGANIZATION_ID}}", "members"],
									"query": [
										{"key": "role", "value": "admin"},
										{"key": "active", "value": "true"},
										{"key": "page", "value": "1"},
										{"key": "limit", "value": "50"}
									]
								}
							},
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Members listed successfully\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData).to.have.property('pagination');",
											"    pm.expect(jsonData.data).to.be.an('array');",
											"    ",
											"    if (jsonData.data.length > 0) {",
											"        var member = jsonData.data[0];",
											"        pm.expect(member).to.have.property('id');",
											"        pm.expect(member).to.have.property('email');",
											"        pm.expect(member).to.have.property('organization_role');",
											"        pm.expect(member).to.have.property('joined_organization_at');",
											"        pm.expect(member).to.have.property('is_active');",
											"    }",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Invite Organization Member",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{ACCESS_TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{INVITE_EMAIL}}\",\n    \"role\": \"member\",\n    \"send_email\": true,\n    \"message\": \"Welcome to our organization! We're excited to have you join our team.\"\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/organizations/{{ORGANIZATION_ID}}/members/invite",
									"host": ["{{BASE_URL}}"],
									"path": ["api", "v1", "organizations", "{{ORGANIZATION_ID}}", "members", "invite"]
								}
							},
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Member invitation sent successfully\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('invitation_id');",
											"    pm.expect(jsonData).to.have.property('email');",
											"    pm.expect(jsonData).to.have.property('role');",
											"    pm.expect(jsonData).to.have.property('invitation_url');",
											"    pm.expect(jsonData).to.have.property('expires_at');",
											"    pm.environment.set('INVITATION_ID', jsonData.invitation_id);",
											"    pm.environment.set('INVITATION_TOKEN', jsonData.invitation_url.split('/').pop());",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Update Member Role",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{ACCESS_TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"organization_role\": \"admin\"\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/organizations/{{ORGANIZATION_ID}}/members/{{MEMBER_USER_ID}}/role",
									"host": ["{{BASE_URL}}"],
									"path": ["api", "v1", "organizations", "{{ORGANIZATION_ID}}", "members", "{{MEMBER_USER_ID}}", "role"]
								}
							},
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Member role updated successfully\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('message');",
											"    pm.expect(jsonData.message).to.include('role updated successfully');",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Remove Organization Member",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ACCESS_TOKEN}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/organizations/{{ORGANIZATION_ID}}/members/{{MEMBER_USER_ID}}",
									"host": ["{{BASE_URL}}"],
									"path": ["api", "v1", "organizations", "{{ORGANIZATION_ID}}", "members", "{{MEMBER_USER_ID}}"]
								}
							},
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Member removed successfully\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('message');",
											"    pm.expect(jsonData.message).to.include('removed from organization successfully');",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Get Organization Member Stats",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ACCESS_TOKEN}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/organizations/{{ORGANIZATION_ID}}/members/stats",
									"host": ["{{BASE_URL}}"],
									"path": ["api", "v1", "organizations", "{{ORGANIZATION_ID}}", "members", "stats"]
								}
							},
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Member stats retrieved successfully\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('total_members');",
											"    pm.expect(jsonData).to.have.property('admin_count');",
											"    pm.expect(jsonData).to.have.property('member_count');",
											"    pm.expect(jsonData).to.have.property('pending_invitations');",
											"    pm.expect(jsonData).to.have.property('has_admin');",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Delete User Account",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{ACCESS_TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"delete_organization\": false,\n    \"reason\": \"User requested account deletion\"\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/organizations/users/{{USER_ID}}",
									"host": ["{{BASE_URL}}"],
									"path": ["api", "v1", "organizations", "users", "{{USER_ID}}"]
								}
							},
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"User account deletion handled correctly\", function () {",
											"    if (pm.response.code === 400) {",
											"        // Expected if user is last member",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.detail).to.have.property('action_required');",
											"    } else {",
											"        pm.response.to.have.status(200);",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData).to.have.property('message');",
											"    }",
											"});"
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "Invitation Management", 
					"item": [
						{
							"name": "Get Invitation Details (Public)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/invitations/{{INVITATION_TOKEN}}",
									"host": ["{{BASE_URL}}"],
									"path": ["api", "v1", "invitations", "{{INVITATION_TOKEN}}"]
								}
							},
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invitation details retrieved\", function () {",
											"    if (pm.response.code === 200) {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData).to.have.property('email');",
											"        pm.expect(jsonData).to.have.property('role');",
											"        pm.expect(jsonData).to.have.property('organization');",
											"        pm.expect(jsonData).to.have.property('invited_by');",
											"        pm.expect(jsonData).to.have.property('expires_at');",
											"        pm.expect(jsonData).to.have.property('is_pending');",
											"    } else {",
											"        pm.expect(pm.response.code).to.eql(404);",
											"    }",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Accept Invitation (Public)",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"{{NEW_USER_PASSWORD}}\",\n    \"full_name\": \"{{NEW_USER_FULL_NAME}}\"\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/invitations/{{INVITATION_TOKEN}}/accept",
									"host": ["{{BASE_URL}}"],
									"path": ["api", "v1", "invitations", "{{INVITATION_TOKEN}}", "accept"]
								}
							},
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invitation accepted successfully\", function () {",
											"    if (pm.response.code === 200) {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData).to.have.property('user');",
											"        pm.expect(jsonData).to.have.property('organization');",
											"        pm.expect(jsonData).to.have.property('is_new_user');",
											"        pm.expect(jsonData).to.have.property('access_token');",
											"        pm.environment.set('NEW_MEMBER_TOKEN', jsonData.access_token);",
											"    } else {",
											"        console.log('Invitation acceptance failed - might be expired or invalid');",
											"    }",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Decline Invitation (Public)",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/invitations/{{INVITATION_TOKEN}}/decline",
									"host": ["{{BASE_URL}}"],
									"path": ["api", "v1", "invitations", "{{INVITATION_TOKEN}}", "decline"]
								}
							},
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invitation decline handled\", function () {",
											"    if (pm.response.code === 200) {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData).to.have.property('message');",
											"        pm.expect(jsonData).to.have.property('invitation_id');",
											"        pm.expect(jsonData).to.have.property('declined_at');",
											"    } else {",
											"        console.log('Invitation decline failed - might be expired or invalid');",
											"    }",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Get Invitation Status (Public)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/invitations/{{INVITATION_TOKEN}}/status",
									"host": ["{{BASE_URL}}"],
									"path": ["api", "v1", "invitations", "{{INVITATION_TOKEN}}", "status"]
								}
							},
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invitation status retrieved\", function () {",
											"    if (pm.response.code === 200) {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData).to.have.property('status');",
											"        pm.expect(jsonData).to.have.property('is_expired');",
											"        pm.expect(jsonData).to.have.property('is_pending');",
											"        pm.expect(jsonData).to.have.property('organization_name');",
											"    }",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "List Organization Invitations",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ACCESS_TOKEN}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/organizations/{{ORGANIZATION_ID}}/invitations?status=pending&page=1&limit=50",
									"host": ["{{BASE_URL}}"],
									"path": ["api", "v1", "organizations", "{{ORGANIZATION_ID}}", "invitations"],
									"query": [
										{"key": "status", "value": "pending"},
										{"key": "page", "value": "1"},
										{"key": "limit", "value": "50"}
									]
								}
							},
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Organization invitations listed\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData).to.have.property('pagination');",
											"    pm.expect(jsonData.data).to.be.an('array');",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Cancel Organization Invitation",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ACCESS_TOKEN}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/organizations/{{ORGANIZATION_ID}}/invitations/{{INVITATION_ID}}",
									"host": ["{{BASE_URL}}"],
									"path": ["api", "v1", "organizations", "{{ORGANIZATION_ID}}", "invitations", "{{INVITATION_ID}}"]
								}
							},
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invitation cancelled successfully\", function () {",
											"    if (pm.response.code === 200) {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData).to.have.property('message');",
											"        pm.expect(jsonData).to.have.property('invitation_id');",
											"        pm.expect(jsonData).to.have.property('cancelled_at');",
											"    } else {",
											"        console.log('Invitation cancellation failed - might not exist or be invalid');",
											"    }",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Resend Invitation Email",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ACCESS_TOKEN}}"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/invitations/resend/{{INVITATION_ID}}",
									"host": ["{{BASE_URL}}"],
									"path": ["api", "v1", "invitations", "resend", "{{INVITATION_ID}}"]
								}
							},
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invitation resend handled\", function () {",
											"    if (pm.response.code === 200) {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData).to.have.property('message');",
											"        pm.expect(jsonData).to.have.property('invitation_id');",
											"        pm.expect(jsonData).to.have.property('email');",
											"    }",
											"});"
										]
									}
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "üìä Analytics & Monitoring",
			"item": [
				{
					"name": "Get Agent History Details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/agents/{{SUPPORT_AGENT_ID}}/history?change_type=configuration_update&limit=20",
							"host": ["{{BASE_URL}}"],
							"path": ["api", "v1", "agents", "{{SUPPORT_AGENT_ID}}", "history"],
							"query": [
								{"key": "change_type", "value": "configuration_update"},
								{"key": "limit", "value": "20"}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Change history with filtering\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.history).to.be.an('array');",
									"    ",
									"    // Validate history record structure",
									"    if (jsonData.history.length > 0) {",
									"        var record = jsonData.history[0];",
									"        pm.expect(record).to.have.property('change_type');",
									"        pm.expect(record).to.have.property('field_changed');",
									"        pm.expect(record).to.have.property('old_value');",
									"        pm.expect(record).to.have.property('new_value');",
									"        pm.expect(record).to.have.property('change_summary');",
									"        pm.expect(record).to.have.property('change_timestamp');",
									"    }",
									"});"
								]
							}
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"console.log('üöÄ AI Ticket Creator API - Agent Architecture Refactor');",
					"console.log('Base URL:', pm.environment.get('BASE_URL'));",
					"",
					"// Check if we have an access token",
					"const token = pm.environment.get('ACCESS_TOKEN');",
					"if (!token && pm.request.url.path.join('/') !== 'api/v1/auth/login') {",
					"    console.warn('‚ö†Ô∏è  No access token found. Make sure to run Login request first.');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"pm.test(\"Response time acceptable\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"// Log response for debugging",
					"if (pm.response.code >= 400) {",
					"    console.error('‚ùå Request failed:', {",
					"        status: pm.response.code,",
					"        statusText: pm.response.status,",
					"        body: pm.response.text()",
					"    });",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "BASE_URL",
			"value": "http://localhost:8000",
			"type": "string"
		},
		{
			"key": "MCP_URL",
			"value": "http://localhost:8001",
			"type": "string"
		},
		{
			"key": "JIRA_URL",
			"value": "https://your-company.atlassian.net",
			"type": "string"
		},
		{
			"key": "JIRA_EMAIL",
			"value": "your-email@company.com",
			"type": "string"
		},
		{
			"key": "JIRA_API_TOKEN",
			"value": "your-jira-api-token",
			"type": "string"
		},
		{
			"key": "JIRA_PROJECT_KEY",
			"value": "SUP",
			"type": "string"
		},
		{
			"key": "SLACK_BOT_TOKEN",
			"value": "xoxb-your-slack-bot-token",
			"type": "string"
		},
		{
			"key": "SLACK_CHANNEL",
			"value": "#support",
			"type": "string"
		},
		{
			"key": "SALESFORCE_CLIENT_ID",
			"value": "your-salesforce-client-id",
			"type": "string"
		},
		{
			"key": "SALESFORCE_CLIENT_SECRET",
			"value": "your-salesforce-client-secret",
			"type": "string"
		},
		{
			"key": "SALESFORCE_INSTANCE_URL",
			"value": "https://your-company.my.salesforce.com",
			"type": "string"
		},
		{
			"key": "ASANA_API_KEY",
			"value": "your-asana-api-key",
			"type": "string"
		},
		{
			"key": "ASANA_WORKSPACE_ID",
			"value": "your-asana-workspace-id",
			"type": "string"
		},
		{
			"key": "ASANA_PROJECT_ID",
			"value": "your-asana-project-id",
			"type": "string"
		},
		{
			"key": "TEST_DOMAIN",
			"value": "example.com",
			"type": "string"
		},
		{
			"key": "TEST_SEARCH",
			"value": "test",
			"type": "string"
		},
		{
			"key": "INVITE_EMAIL",
			"value": "newmember@example.com",
			"type": "string"
		},
		{
			"key": "NEW_USER_PASSWORD",
			"value": "SecurePassword123!",
			"type": "string"
		},
		{
			"key": "NEW_USER_FULL_NAME",
			"value": "New Team Member",
			"type": "string"
		},
		{
			"key": "MEMBER_USER_ID",
			"value": "member-user-id-placeholder",
			"type": "string"
		},
		{
			"key": "INVITATION_ID",
			"value": "invitation-id-placeholder",
			"type": "string"
		},
		{
			"key": "INVITATION_TOKEN",
			"value": "invitation-token-placeholder",
			"type": "string"
		},
		{
			"key": "WEBHOOK_TOKEN",
			"value": "your-webhook-bearer-token",
			"type": "string"
		},
		{
			"key": "WEBHOOK_SECRET",
			"value": "your-webhook-secret-key",
			"type": "string"
		},
		{
			"key": "GITHUB_ACCESS_TOKEN",
			"value": "ghp_your-github-access-token",
			"type": "string"
		},
		{
			"key": "GITHUB_REFRESH_TOKEN",
			"value": "your-github-refresh-token",
			"type": "string"
		},
		{
			"key": "GITHUB_REPO",
			"value": "your-repository-name",
			"type": "string"
		},
		{
			"key": "GITHUB_OWNER",
			"value": "your-github-username-or-org",
			"type": "string"
		}
	]
}